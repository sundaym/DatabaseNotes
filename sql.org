* sql(Structured Query Language)
sql分为以下几大类
1.数据定义语言(DDL),如create drop alter语句等
2.数据操作语言(DML),如insert update delete
3.数据查询语言(DQL),如select
4.数据控制语言(DCL),如grant revoke commit rollback等语句

** Database
- A Database is a collection of data stored in a format that can easily be accessed.
- 为了管理数据库，我们使用一种叫做DBMS（数据库管理系统）的软件应用
- 我们连接到一个DBMS，然后下达查询或修改数据的指令，DBMS就会执行指令并返回结果
- DBMS分类：Relational, NoSQL

** 学习目标
- Retrieving Data
- Inserting Data
- Updating Data
- Deleting Data
- Summarizing Data(汇总数据来创建报告)
- Writing Complex Queries(使用子查询来编写复杂查询)
- Built-in Functions(MySQL的基本内置函数,用于数字，日期及文本数据)
- Views
- Stored Procedures
- Function
- Triggers(触发器)
- Events(事件)
- Transactions(事务)
- Concurrency(并发)
- Desinging Database(设计数据库)
- Indexing for High Performance
- Securing Database(如何保护你的数据库:创建用户账户,分配各种权限)

** 查询语句
通过写查询来得到数据库中的数据的第一步：选中一个Database。
我们写的查询会针对那个Database执行
#+BEGIN_SRC sql
-- sql不分大小写，最好的做法就是大写sql的关键字并小写其余所有内容
-- 第一步：选中一个Database
USE sql_store;

SELECT *
FROM customers
WHERE customer_id = 1
ORDER BY first_name
#+END_SRC
*** 选择子句(SELECT Clause)
#+BEGIN_SRC sql
SELECT
  last_name,
  first_name,
  points,
  (points + 10) * 100 AS discount_factor -- 使用AS关键字给这一列一个别名
FROM customers

#+END_SRC

如果想在结果集中得到一份州的唯一列表,使用DISTINCT关键字
#+BEGIN_SRC sql
-- 通过这条查询就能在customers表获取一份州的唯一列表，多个客户可能所属相同的州
SELECT DISTINCT state
FROM customers

#+END_SRC
*** WHERE子句(WHERE Clause)
#+BEGIN_SRC sql
-- 查询积分大于3000的语句
SELECT *
FROM customers
WHERE points > 3000

SELECT *
FROM customers
WHERE birth_date > '1990-01-01' -- 用引号表述日期值 即使日期不算是字符串
#+END_SRC
*** AND OR NOT 运算符
#+BEGIN_SRC sql
SELECT *
FROM customers
WHERE birth_date > '1990-01-01' OR (points>1000 AND state='VA')
-- 逻辑运算符优先级 NOT AND OR
#+END_SRC
*** IN 运算符
#+BEGIN_SRC sql
SELECT *
FROM customers
WHERE state IN ('VA', 'FL', 'GA')
-- WHERE state NOT IN ('VA', 'FL', 'GA')

#+END_SRC
*** BETWEEN 运算符
#+BEGIN_SRC sql
-- 假设我们想获取积分介于1000和3000之间的客户
SELECT *
FROM customers
-- WHERE points >= 1000 AND points <= 3000
WHERE points BETWEEN 1000 AND 3000

#+END_SRC
*** LIKE 运算符
#+BEGIN_SRC sql
-- 想获得B开头姓氏的客户而B之后可能有任意长度的字符，用%表示任意字符数
SELECT *
FROM customers
WHERE last_name LIKE 'B%' -- B不分大小写
-- LIKE '%b%' 表示b前后任意字符数
-- LIKE '_y' _表示一个单字符,这样获取姓氏以y结尾2个字符长度的客户
-- % any number of characters
-- _ single character
#+END_SRC
*** REGEXP运算符
#+BEGIN_SRC sql
SELECT *
FROM customers
WHERE last_name REGEXP 'field'
-- ^field 表示必须以field开头
-- field$ 表示必须以field结尾
-- field|mac 表示包含field或mac
-- [gim]e 表示 ge ie me
-- [a-h]e 等于[abcdefgh]e


#+END_SRC
*** NULL 运算符
#+BEGIN_SRC sql
SELECT *
FROM customers
WHERE phone IS NOT NULL

#+END_SRC
*** LIMIT Clause
#+BEGIN_SRC sql
-- 限定查询返回的记录数
SELECT *
FROM customers
LIMIT 3 -- 返回前3条数据
-- LIMIT 6,3 跳过前6条获取3条

#+END_SRC
*** INNER JOIN
#+BEGIN_SRC sql
-- MySQL INNER可写可不写
SELECT *
FROM orders o
JOIN customers c
ON o.customer_id=c.customer_id

#+END_SRC
*** Self joins 自连接
#+BEGIN_SRC sql
SELECT *
FROM employees e
JOIN employees m
ON e.reports_to=m.employee_id

SELECT e.employee_id, e.first_name, m.first_name AS manager
FROM employees e
JOIN employees m
ON e.reports_to=m.employee_id

#+END_SRC
*** 多表连接
#+BEGIN_SRC sql
SELECT
    o.order_id,
    o.order_date,
    c.first_name,
    c.last_name,
    os.name AS status
FROM orders o
JOIN customers c
ON o.customer_id=c.customer_id
JOIN order_statuses os
ON o.status=os.order_status_id

#+END_SRC
*** Implicit Joins Syntax隐式连接
#+BEGIN_SRC sql
-- 隐式内连接
SELECT *
FROM orders o, customers c
WHERE o.customer_id=c.customer_id

#+END_SRC
*** Outer Joins 外连接
#+BEGIN_SRC sql
-- INNER JOIN
-- 我们只能看到有订单的客户下面的连接条件，有的客户没订单，订单表中就没有记录
SELECT
    c.customer_id,
    c.first_name,
    o.order_id
FROM customers c
JOIN orders o
ON c.customer_id=o.customer_id
ORDER BY c.customer_id

-- OUTER JOIN
-- 如果想看到所有的客户，不管它们有没有订单
-- 两种LEFT JOIN和RIGHT JOIN
-- left join所有左表的记录会被返回，不管条件正确不正确
SELECT
    c.customer_id,
    c.first_name,
    o.order_id
FROM customers c  -- 左表
LEFT JOIN orders o
ON c.customer_id=o.customer_id
ORDER BY c.customer_id
#+END_SRC
*** 多表外连接
#+BEGIN_SRC sql
SELECT
    c.customer_id,
    c.first_name,
    o.order_id,
    sh.name AS shipper
FROM customers c
LEFT JOIN orders o
ON c.customer_id=o.customer_id
LEFT JOIN shippers sh -- 发货人
ON o.shipper_id=sh.shipper_id
ORDER BY c.customer_id
#+END_SRC
*** Self Outer Joins 自外连接
*** USING CLAUSE USING子句
#+BEGIN_SRC sql
-- MySQL提供USINGA
SELECT
    o.order_id,
    c.first_name
FROM orders o
JOIN customers c
-- ON o.customer_id=c.customer_id
-- 只能在不同表中列名完全一样的情况下使用
USING (customer_id) -- 等价于上面的写法
#+END_SRC
*** Unions 联合
#+BEGIN_SRC sql
-- 使用UNION运算符可以合并多段查询记录
SELECT
    order_id,
    order_date,
    'Active' AS status --活跃
FROM orders
WHERE order_date>='2019-01-01';
UNION
SELECT
    order_id,
    order_date,
    'Archived' AS status --归档
FROM orders
WHERE order_date<'2019-01-01'
#+END_SRC
*** Column Attributes列属性
MySQL列属性
| Column | Datatype | PK   | NN       |   | UQ | BIN | UN | ZF | AI   | G | Default/Expression |
|--------+----------+------+----------+---+----+-----+----+----+------+---+--------------------|
| 列名   | 数据类型 | 主键 | not null |   |    |     |    |    | 自增 |   | 默认值             |

自增属性被启用，如果我们不提供任何值，MySQL就会帮我们生成一个唯一值
*** Inserting a Row
#+BEGIN_SRC sql
INSERT INTO customers (
    id, -- 可省略
    first_name,
    last_name,
    birth_date,
    address,
    city,
    state,
    points) -- 可省略
VALUES (
    DEFAULT, -- 可省
    'John',
    'Smith',
    '1990-01-01,'
    NULL,
    'address',
    'city',
    'CA',
    DEFAULT) -- 可省

#+END_SRC
*** Inserting Multiple Rows
#+BEGIN_SRC sql
INSERT INTO shippers (name)
VALUES
('Shipper1'),
('Shipper2'),
('Shipper3')
#+END_SRC
*** Inserting Hierarchical Rows 插入分层行
#+BEGIN_SRC sql
INSERT INTO orders (customer_id, order_date, status)
VALUES (1, '2019-01-02', 1)

#+END_SRC
*** Creating a Copy of a Table创建表复制
想把这张表的每一行插入到新表中
#+BEGIN_SRC sql
-- 为了创建新表使用CREATE TABLE AS
CREATE TABLE orders_archived AS
SELECT * FROM orders -- 子查询，子查询是部分属于另一段SQL语句的选择语句

-- Truncate Table 删除表中所有行

#+END_SRC
*** Updating a Single Row更新单行
#+BEGIN_SRC sql
UPDATE invoices
SET payment_total = 10, payment_date='2019-03-01'
WHERE invoice_id = 1
#+END_SRC
*** Updating Multiple Rows
#+BEGIN_SRC sql
UPDATE customers
SET points = points + 50
WHERE birth_date < '1990-01-01'
#+END_SRC
*** Using Subqueries in Updates Updates中使用子查询
#+BEGIN_SRC sql

#+END_SRC
*** Deleting Rows
#+BEGIN_SRC sql
DELETE FROM invoices -- 不屑where子句会删除表里的全部数据
WHERE invoice_id=1

DELETE FROM invoices
WHERE client_id=(
    SELECT * FROM clients WHERE name='Myworks'
)

#+END_SRC
*** Restoring the Databases恢复数据库
*** Aggregate Functions汇总数据
SQL中的聚合函数使用
MAX()
MIN()
AVG()
SUM()
COUNT()
#+BEGIN_SRC sql
SELECT
-- 也可以用于日期和字符串
-- MAX(payment_date) 这里的值得到是最近的日期
MAX(invoice_total) AS highest,
MIN(invoice_total) AS lowest,
AVG(invoice_total) AS average,
SUM(invoice_total) AS total,
COUNT(invoice_total) AS number_of_invoices
FROM invoices
WHERE invoice_date > '2019-07-01'
#+END_SRC
*** The Group By Clause|Gourp By子句
#+BEGIN_SRC sql
SELECT
SUM(invoice_total) AS total_sales -- 总的销售额
FROM invoices

-- 如果想要知道每个客户的总销售额，就需要对一列或多列数据进行分组
SELECT
    client_id,
    SUM(invoice_total) AS total_sales
FROM invoices
WHERE invoice_date >= '2019-07-01' -- GROUP BY子句永远在FROM和WHERE子句之后，在ORDER BY子句之前
GROUP BY client_id -- 默认状态下数据是按照GROUP BY子句总指定的列排序的
ORDER BY total_sales DESC -- 可以使用ORDER BY子句来调整排序
#+END_SRC

#+BEGIN_SRC sql
-- 用多列进行分组
SELECT
    state,
    city,
    SUM(invoice_total) AS total_sales
FROM invoices i
JOIN clients USING (client_id)
GROUP BY state, city -- 按照州和城市分组
-- 每个state和city组合，我们得到一条数据
#+END_SRC
*** The HAVING clause|HAVING子句
#+BEGIN_SRC sql
-- HAVING子句在对数据进行分组后筛选数据
SELECT
    client_id,
    SUM(invoice_total) AS total_sales
FROM invoices
GROUP BY total_sales
HAVING total_sales > 500

#+END_SRC
*** Subqueries|子查询
#+BEGIN_SRC sql
-- 找出所有产品价格比生菜贵的(id=3)
SELECT *
FROM products
WHERE unit_price >(
    SELECT unit_price
    FROM products
    WHERE product_id=3
)
-- SQL执行是会先对内查询(或子查询)进行运算，获得生菜的单价，然后把结果传给外查询
#+END_SRC
*** The IN Operator|IN运算符
#+BEGIN_SRC sql
-- 查询出所有不在订单中的商品
SELECT *
FROM products
WHERE product_id NOT IN (
    SELECT DISTINCT product_id
    FROM order_items
)

#+END_SRC
*** Subqueries vs Joins
子查询和连接互换
#+BEGIN_SRC sql
-- Find client without invoices
SELECT *
FROM clients
WHERE client_id NOT IN (
    SELECT DISTINCT client_id
    FROM invoices
)

SELECT *
FROM clients
LEFT JOIN invoices USING client_id
WHERE invoice_id IS NULL

#+END_SRC
*** The ALL Keyword|ALL 关键字
#+BEGIN_SRC sql


#+END_SRC
